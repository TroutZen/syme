var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}import StorageController from'./internal/storage-controller';/**\

    Cache
        A simple to use mechanism for keeping data fresh

\**/var Cache=function(){function Cache(def){_classCallCheck(this,Cache);var _def=def||{};this.key=_def.key||this.constructor.name;this.channel=_def.channel||'memory';this.expiration=parseInt(_def.expiration||500,10);if(!/^(memory|local|session)$/.test(this.channel)){throw new Error(['Invalid storage mechanism sent','to '+this.constructor.name+'.channel'].join(' '));}// we only concern ourself with building a context
// in memory on the server
/* istanbul ignore next */if(typeof window==='undefined'){this.channel='memory';}if(isNaN(this.expiration)){throw new Error(['Invalid expiration time set for',this.constructor.name+'.expiration'].join(' '));}Object.defineProperty(this,'cached',{get:function get(){var stored=StorageController.get(this.channel,this.key),fresh=StorageController.freshness(this.channel,this.key);if(!fresh&&Object.keys(stored).length||fresh&&Date.now()-fresh<this.expiration){return stored;}return false;},set:function set(){throw new Error('cached is a read only property');}});}_createClass(Cache,[{key:'populate',value:function populate(data){StorageController.populate(this.channel,this.key,data);return this;}},{key:'watch',value:function watch(callback){StorageController.register(this.channel,this.key,function(data){callback(data);});return this;}}]);return Cache;}();export default Cache;