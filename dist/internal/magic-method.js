var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();import Model from'../model.js';import MagicArray from'./magic-array.js';function MagicMethod(obj,def,param,throttle){Object.defineProperty(obj,param,{configurable:true,get:function get(){return def[param].value;},set:function set(val){var last=def[param].value,isArray=Object.prototype.toString.call(def[param].default)==='[object Array]';var _val=val,valid=true,error=void 0,ni=void 0,a=void 0;if(isArray){if(def[param].type){for(ni=0;ni<val.length;ni++){a=val[ni];if(Object.prototype.toString.call(val[ni])==='[object Array]'||typeof val[ni].fill!=='function'){val[ni]=new def[param].type(a);// eslint-disable-line
}}}}else if(def[param].type&&(def[param].type instanceof Model||def[param].type.prototype instanceof Model)&&!(val instanceof def[param].type)){_val=new def[param].type(val);// eslint-disable-line
}// do some validation here
for(ni=0;ni<def[param].before.length;ni++){var _def$param$before$ni=def[param].before[ni](_val);var _def$param$before$ni2=_slicedToArray(_def$param$before$ni,2);error=_def$param$before$ni2[0];_val=_def$param$before$ni2[1];valid=valid&&!error;if(!valid){return;}}if(def[param].value===_val){return;}if(isArray&&!_val.hasOwnProperty('_def')){def[param].value=new MagicArray(def,param,throttle,_val);// eslint-disable-line
}else{def[param].value=_val;}throttle.add(param,{old:last,new:def[param].value});}});}export default MagicMethod;